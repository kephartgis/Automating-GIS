# -*- coding: utf-8 -*-
# ---------------------------------------------------------------------------
# Point_FC_To_Linear_Event_50ftBuffer.py
# Created on: 2019-06-04 10:28:24.00000
#   (generated by ArcGIS/ModelBuilder)
# Usage: Point_FC_To_Linear_Event_50ftBuffer_MB_EXPORT_Original <Workspace> <Route_LRS_Network> <Source_Point_Feature_Class> 
# Description: 
# A conversion of point feature class data into point event data for loading into R&H.
# ---------------------------------------------------------------------------

# Import arcpy module
import arcpy

# Script arguments
Workspace = arcpy.GetParameterAsText(0)
LRS_Route_Network = arcpy.GetParameterAsText(1)
Source_Point_Data = arcpy.GetParameterAsText(2)

# Local variables:
B_SourceData_CopyForLocate = "%Workspace%\\B_SourceData_CopyForLocate"
B_SourceData_CopyForLocate_Layer = "B_SourceData_CopyForLocate_Layer"
Output_Event_Table_Properties = "RID POINT MEAS"
E_CopyOfOriginalInputWithNewFields = "%Workspace%\\E_CopyOfOriginalInputWithNewFields"
E_CopyOfOriginalInputWithNewFields_View = "E_CopyOfOriginalInputWithNewFields_View"
C_PointData_LocateFeatures = "%Workspace%\\C_PointData_LocateFeatures"
C_PointData_LocateFeatures_View = "C_PointData_LocateFeatures_View"
D_PointData_LocateFeatures_FeaturesToUse = "%Workspace%\\D_PointData_LocateFeatures_FeaturesToUse"
F_FinalEventTable = "%Workspace%\\F_FinalEventTable"
G_FinalEventTable_Events = "G_FinalEventTable Events"
G_FinalEventsToQC = "%Workspace%\\G_FinalEventsToQC"
G_FinalEventsToQC_Layer = "G_FinalEventsToQC_Layer"
H_OrigEventsNotLocated = "%Workspace%\\H_OrigEventsNotLocated"

arcpy.env.workspace = Workspace

# Process: Copy
arcpy.Copy_management(Source_Point_Data, B_SourceData_CopyForLocate, "FeatureClass")

# Process: Add Field (Route_ID)
arcpy.AddField_management(B_SourceData_CopyForLocate, "Route_ID", "TEXT", "", "", "255", "", "NULLABLE", "NON_REQUIRED", "")

# Process: Add Field (Event_ID)
arcpy.AddField_management(B_SourceData_CopyForLocate, "Event_ID", "GUID", "", "", "", "", "NULLABLE", "NON_REQUIRED", "")

# Process: Add Field (From_Date)
arcpy.AddField_management(B_SourceData_CopyForLocate, "From_Date", "DATE", "", "", "", "", "NULLABLE", "NON_REQUIRED", "")

# Process: Calculate Unique Event_ID
arcpy.CalculateField_management(B_SourceData_CopyForLocate, "Event_ID", "CalcGUID()", "PYTHON", "def CalcGUID():\\n   import uuid\\n   return '{' + str(uuid.uuid4()).upper() + '}'\\n")

# Process: Calculate From_Date
arcpy.CalculateField_management(B_SourceData_CopyForLocate, "From_Date", "Date (  )", "VB", "")

# Process: Add Attribute Index (Event_ID)
arcpy.AddIndex_management(B_SourceData_CopyForLocate, "Event_ID", "index_EventID", "UNIQUE", "NON_ASCENDING")

# Process: Make Feature Layer
arcpy.MakeFeatureLayer_management(B_SourceData_CopyForLocate, B_SourceData_CopyForLocate_Layer, "", Workspace, "")

# Process: Locate Pts Along Routes (50ft buffer)
arcpy.LocateFeaturesAlongRoutes_lr(B_SourceData_CopyForLocate_Layer, LRS_Route_Network, "ROADWAY", "50 Feet", C_PointData_LocateFeatures, Output_Event_Table_Properties, "FIRST", "DISTANCE", "ZERO", "FIELDS", "M_DIRECTON")

# Process: Table to Table
arcpy.TableToTable_conversion(B_SourceData_CopyForLocate_Layer, Workspace, "E_CopyOfOriginalInputWithNewFields", "", "", "")

#if there's already a Measure field, create a new field named Source_Measure, copy those values in, and delete existing Measure field after copying out the values, and then process can pick up at next line.
###
# Process: Add Field (Source_Measure)
arcpy.AddField_management(B_SourceData_CopyForLocate, "Source_Measure", "DOUBLE", "", "", "", "", "NULLABLE", "NON_REQUIRED", "")

# Process: Calculate Source_Measure
arcpy.CalculateField_management(B_SourceData_CopyForLocate, "Source_Measure", "!Measure!", "PYTHON_9.3")

# Process: Delete Field (Measure)
arcpy.DeleteField_management(B_SourceData_CopyForLocate, "Measure")
###
# Process: Add Field (Measure)
arcpy.AddField_management(E_CopyOfOriginalInputWithNewFields, "Measure", "DOUBLE", "", "", "", "", "NULLABLE", "NON_REQUIRED", "")

# Process: Make Table View (Final Schema)
arcpy.MakeTableView_management(E_CopyOfOriginalInputWithNewFields, E_CopyOfOriginalInputWithNewFields_View, "", Workspace, "")

# Process: Make Table View (Pts)
arcpy.MakeTableView_management(C_PointData_LocateFeatures, C_PointData_LocateFeatures_View, "", "", "")

# Process: Table to Table (Pts)
arcpy.TableToTable_conversion(C_PointData_LocateFeatures_View, Workspace, "D_PointData_LocateFeatures_FeaturesToUse", "", "")

# Process: Add Join with Pts
arcpy.AddJoin_management(E_CopyOfOriginalInputWithNewFields_View, "Event_ID", D_PointData_LocateFeatures_FeaturesToUse, "Event_ID", "KEEP_ALL")

# Process: Calculate Field (Route_ID)
arcpy.CalculateField_management(E_CopyOfOriginalInputWithNewFields_View, "E_CopyOfOriginalInputWithNewFields.Route_ID", "!D_PointData_LocateFeatures_FeaturesToUse.RID!", "PYTHON", "")

# Process: Calculate Field (Measure)
arcpy.CalculateField_management(E_CopyOfOriginalInputWithNewFields_View, "E_CopyOfOriginalInputWithNewFields.Measure", "!D_PointData_LocateFeatures_FeaturesToUse.MEAS!", "PYTHON", "")

# Process: Remove Join with Pts
arcpy.RemoveJoin_management(E_CopyOfOriginalInputWithNewFields_View, "D_PointData_LocateFeatures_FeaturesToUse")

# Process: Export to Final Table
arcpy.TableToTable_conversion(E_CopyOfOriginalInputWithNewFields_View, Workspace, "F_FinalEventTable", "", "", "")

# Process: Make Route Event Layer
arcpy.MakeRouteEventLayer_lr(LRS_Route_Network, "Route_ID", F_FinalEventTable, "RouteID POINT Measure", G_FinalEventTable_Events, "", "ERROR_FIELD", "NO_ANGLE_FIELD", "NORMAL", "ANGLE", "LEFT", "POINT")

# Process: Copy Features
arcpy.CopyFeatures_management(G_FinalEventTable_Events, G_FinalEventsToQC, "", "0", "0", "0")

# Process: Make Feature Layer 
arcpy.MakeFeatureLayer_management(G_FinalEventsToQC, G_FinalEventsToQC_Layer, "", "", "")


